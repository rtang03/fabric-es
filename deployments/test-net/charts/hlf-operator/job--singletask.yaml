# {{- if .Values.fetchSend.enabled }}
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: {{ include "hlf-operator.fullname" . }}--singletask
#   labels:
# {{- include "labels.standard" . | nindent 4 }}
# spec:
#   backoffLimit: 0
#   parallelism: 1
#   completions: 1
#   template:
#     spec:
#       restartPolicy: Never
#       volumes:
#         - name: fabricfiles
#           persistentVolumeClaim:
#             claimName:
#         - name: setup-script
#           configMap:
#             name: {{ .Values.global.config.setupsh }}
#             defaultMode: 0777
#         - name: core-yaml
#           configMap:
#             name: {{ .Values.global.config.coreyaml }}
#         - name: org0-tls-ca-cert
#           secret:
#             secretName:
#       containers:
#         - name: fetch-decode-send
#           image: library/alpine:3.12.0
#           tty: true
#           command: ["sh", "-c"]
#           args:
#             - |-
#               . /script/setup.sh
#               apk update
#               apk upgrade
#               apk --no-cache add libc6-compat libstdc++ jq
#               ./bin/peer version
#               ### Fetch channel config and turn into config.json
#               printHeader "Fetch channel config"
#               ${BIN}/peer channel fetch config {{ .Values.global.workingDir }}/crypto-config/channel-artifacts/config_block.pb \
#                 -o ${ORDERER_URL} -c ${CHANNEL_NAME} \
#                 --tls --cafile ${ORDERER_CA} >& {{ .Values.global.workingDir }}/crypto-config/channel-artifacts/log-fetchconfig.txt
#               res=$?
#               set +x
#               printMessage "fetch channel config: config_block.pb" $res
#               cat {{ .Values.global.workingDir }}/crypto-config/channel-artifacts/log-fetchconfig.txt
#               printHeader "Decoding config block to JSON and isolating config"
#               set -x
#               ${BIN}/configtxlator proto_decode --input {{ .Values.global.workingDir }}/crypto-config/channel-artifacts/config_block.pb \
#                 --type common.Block | jq .data.data[0].payload.data.config > {{ .Values.global.workingDir }}/crypto-config/channel-artifacts/config.json
#               res=$?
#               set +x
#               printMessage "decode block and extract channel config: config.json" $res
#               ### Gupload to new org
#           workingDir: {{ .Values.global.workingDir }}
#           envFrom:
#             - configMapRef:
#                 name: {{ include "hlf-operator.fullname" . }}--cli
#           volumeMounts:
#             - mountPath: /var/hyperledger
#               name: fabricfiles
#             - mountPath: /etc/hyperledger
#               name: core-yaml
#             - name: setup-script
#               mountPath: /script/setup.sh
#               subPath: setup.sh
#             - name: org0-tls-ca-cert
#               mountPath: {{ .Values.global.workingDir }}/crypto-config/channel-artifacts/org0-tls-ca-cert
# {{- end }}
#
