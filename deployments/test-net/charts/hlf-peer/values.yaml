# Default values for  hlf-peer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: hyperledger/fabric-peer
  tag: 2.1.0
  pullPolicy: IfNotPresent

service:
  # Cluster IP or LoadBalancer
  type: ClusterIP
  portRequest: 7051
  portEvent: 7053

# Path of the docker socket on the host
dockerSocketPath: /var/run/docker.sock
# Docker config to be used to pull the images (base64'd)
dockerConfig: null
# Docker config mount path
dockerConfigMountPath: /root/.docker

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
  # certmanager.k8s.io/cluster-issuer: "letsencrypt-staging"
  path: /
  hosts:
    - peer0.org1.net
#  tls: []
  #  - secretName: hlf-peer-tls
  #    hosts:
  #      - hlf-peer.local

persistence:
  enabled: true
  pvName: pv-p0o1
  pvcName: pvc-p0o1
  hostPath: /tmp/data/p0o1
  annotations: {}
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "manual"
  accessMode: ReadWriteOnce
  size: 10Mi
  # existingClaim: ""

logging:
  # "info" or "grpc=debug:debug"
  level: "info"
  peer: info
  cauthdsl: warning
  gossip: info
  grpc: error
  ledger: info
  msp: warning
  policies: warning

orderers:
  - name: "orderer0.org0.com"
    hostAlias: "10.96.55.82"
  - name: "orderer1.org0.com"
    hostAlias: "10.104.96.29"
  - name: "orderer2.org0.com"
    hostAlias: "10.96.179.20"
  - name: "orderer3.org0.com"
    hostAlias: "10.104.35.23"
  - name: "orderer4.org0.com"
    hostAlias: "10.97.171.134"

##################################
## Peer configuration options    #
##################################
peer:
  ledgerPath: /var/hyperledger/production
  orgPath: /var/hyperledger/crypto-config/Org1MSP
  peerName: peer0
  domain: org1.net
  # Type of database ("goleveldb" or "CouchDB"):
  databaseType: CouchDB
  # If CouchDB is used, which chart holds it
  couchdbInstance: p0o1db
  ## MSP ID of the Peer
  mspID: Org1MSP
  gossip:
    bootstrap: "p0o1-hlf-peer:7051"
    endpoint: "p0o1-hlf-peer:7051"
    externalEndpoint: "p0o1-hlf-peer:7051"
    orgLeader: "false"
    useLeaderElection: "true"

  tls:
    server:
      enabled: "true"
    client:
      enabled: "false"
  chaincode:
    # define the ccenv image used by the peer
    builder: ""
    runtime:
      golang: ""
      java: ""
      node: ""
# Secrets references, empty by default, fill in with your secrets (particularly adminCert) or add Peer Admin certificate manually after launching chart.
secrets:
  ## These secrets should contain the Orderer crypto materials and credentials
  peer:
    ## Credentials, saved under keys 'CA_USERNAME' and 'CA_PASSWORD'
    # cred: hlf--peer1-cred
    cred: "rcaorg1-tls"
    ## Certificate, saved under key 'cert.pem'
    # cert: hlf--peer1-idcert
    cert: "peer0.org1.net-cert"
    ## Key, saved under 'key.pem'
    # key: hlf--peer1-idkey
    key: "peer0.org1.net-key"
    ## CA Cert, saved under 'cacert.pem'
    # caCert: hlf--peer1-cacert
    caCert: "peer0.org1.net-cacert"
    ## Intermediate CA Cert (optional), saved under 'intermediatecacert.pem'
    # intCaCert: hlf--peer1-caintcert
    ## TLS secret, saved under keys 'tls.crt' and 'tls.key' (to conform with K8S nomenclature)
    # tls: hlf--peer1-tls
    tls: "peer0.org1.net-tls"
    ## TLS root CA certificate saved under key 'cert.pem'
    # tlsRootCert: hlf--peer-tlsrootcert
    tlsRootCert: "peer0.org1.net-tlsrootcert"
    ## TLS client root CA certificates saved under any names (as there may be multiple)
    # tlsClient: hlf--peer1-tls
    ## TLS client root CA certificates saved under any names (as there may be multiple)
    # tlsClientRootCerts: hlf--ord-tlsrootcert
  ## This should contain "channel" transaction derived from a configtx.yaml
  ## configtxgen -profile ComposerChannel -channelID composerchannel -outputCreateChannelTx composerchannel.tx
  # channels:
  # - foochannel
  # - barchannel
  channels:
    - "channeltx"
  ## This should contain the Certificate of the Peer Organisation admin
  ## This is necessary to successfully run the peer
  # adminCert: hlf--peer-admincert
  adminCert: "peer0.org1.net-admincert"
  ## This should contain the Private Key of the Peer Organisation admin
  ## This is necessary to successfully join a channel
  # adminKey: hlf--peer-adminkey
  adminKey: "peer0.org1.net-adminkey"
  ## This should include the Orderer TLS 'cacert.pem'
  # ordTlsRootCert: hlf--ord-tlsrootcert
  ordTlsRootCert: "orderer0.org0.com-tlsrootcert"
  ordTlsSignCert: "orderer0.org0.com-tlssigncert"

resources: {}
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
#   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
  ## Suggested antiAffinity, as each Peer should be on a separate Node for resilience
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     - topologyKey: "kubernetes.io/hostname"
  #       labelSelector:
  #         matchLabels:
#           app: hlf-peer
