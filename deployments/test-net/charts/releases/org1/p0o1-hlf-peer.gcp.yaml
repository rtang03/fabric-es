global:
#  TZ: Asia/Hong_Kong
#  workingDir: /var/hyperledger/crypto-config
  mspId: Org1MSP
  domain: org1.net

#image:
#  repository: hyperledger/fabric-peer
#  tag: 2.2.0
#  pullPolicy: IfNotPresent

service:
  type: ClusterIP
  portRequest: 7051
  portEvent: 7053

# Path of the docker socket on the host
dockerSocketPath: /var/run/docker.sock
# Docker config to be used to pull the images (base64'd)
dockerConfig: null
# Docker config mount path
dockerConfigMountPath: /root/.docker

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPCS"
  path: /
  hosts:
    - peer0.org1.net
  tls:
    - hosts:
        - peer0.org1.net
      secretName: peer0.org1.net-tls

externalService:
  - name: o0-hlf-ord
    externalName: o0-hlf-ord.n0.svc.cluster.local
  - name: o1-hlf-ord
    externalName: o1-hlf-ord.n0.svc.cluster.local
  - name: o2-hlf-ord
    externalName: o2-hlf-ord.n0.svc.cluster.local
  - name: o3-hlf-ord
    externalName: o3-hlf-ord.n0.svc.cluster.local
  - name: o4-hlf-ord
    externalName: o4-hlf-ord.n0.svc.cluster.local
  - name: p0o2-hlf-peer
    externalName: peer0.org2.net

persistence:
  enabled: true
  pvcName: pvc-p0o1

logging:
  # "info" or "debug" or "grpc=debug:debug" or "grpc=debug:info"
  level: "info"
  peer: info
  cauthdsl: warning
  gossip: info
  grpc: error
  ledger: info
  msp: warning
  policies: warning

##################################
## Peer configuration options    #
##################################
peer:
  ledgerPath: /var/hyperledger/production
  peerName: peer0
  # orgPath: /var/hyperledger/crypto-config/Org1MSP
  # Type of database ("goleveldb" or "CouchDB"):
  databaseType: CouchDB
  # If CouchDB is used, which chart holds it
  couchdbInstance: p0o1db
  ## Database username
  couchdbUsername: couchdb
  ## Database password (default: random 24 character string)
  couchdbPassword: password
  ## MSP ID of the Peer
  gossip:
    bootstrap: "p0o1-hlf-peer:7051"
    endpoint: "p0o1-hlf-peer:7051"
    externalEndpoint: "peer0.org1.net:443"
    orgLeader: "false"
    useLeaderElection: "true"
  tls:
    server:
      enabled: "true"
    client:
      enabled: "false"
  chaincode:
    # define the ccenv image used by the peer
    builder: ""
    runtime:
      golang: ""
      java: ""
      node: ""

# Secrets references, empty by default, fill in with your secrets (particularly adminCert) or add Peer Admin certificate manually after launching chart.
secrets:
  ## These secrets should contain the Orderer crypto materials and credentials
  peer:
    ## Credentials, saved under keys 'CA_USERNAME' and 'CA_PASSWORD'
    # cred: hlf--peer1-cred
    cred: "rcaorg1-tls"
    ## Certificate, saved under key 'cert.pem'
    # cert: hlf--peer1-idcert
    cert: "peer0.org1.net-cert"
    ## Key, saved under 'key.pem'
    # key: hlf--peer1-idkey
    key: "peer0.org1.net-key"
    ## CA Cert, saved under 'cacert.pem'
    # caCert: hlf--peer1-cacert
    caCert: "peer0.org1.net-cacert"
    ## Intermediate CA Cert (optional), saved under 'intermediatecacert.pem'
    # intCaCert: hlf--peer1-caintcert
    ## TLS secret, saved under keys 'tls.crt' and 'tls.key' (to conform with K8S nomenclature)
    # tls: hlf--peer1-tls
    tls: "peer0.org1.net-tls"
    ## TLS root CA certificate saved under key 'cert.pem'
    # tlsRootCert: hlf--peer-tlsrootcert
    tlsRootCert: "peer0.org1.net-tlsrootcert"
    ## TLS client root CA certificates saved under any names (as there may be multiple)
    # tlsClient: hlf--peer1-tls
    ## TLS client root CA certificates saved under any names (as there may be multiple)
    # tlsClientRootCerts: hlf--ord-tlsrootcert
  ## This should contain "channel" transaction derived from a configtx.yaml
  ## configtxgen -profile ComposerChannel -channelID composerchannel -outputCreateChannelTx composerchannel.tx
  # channels:
  # - foochannel
  # - barchannel
  channels:
    - "channeltx"
  ## This should contain the Certificate of the Peer Organisation admin
  ## This is necessary to successfully run the peer
  # adminCert: hlf--peer-admincert
  adminCert: "peer0.org1.net-admincert"
  ## This should contain the Private Key of the Peer Organisation admin
  ## This is necessary to successfully join a channel
  # adminKey: hlf--peer-adminkey
  adminKey: "peer0.org1.net-adminkey"
  ## This should include the Orderer TLS 'cacert.pem'
  # ordTlsRootCert: hlf--ord-tlsrootcert
  ordTlsRootCert: "orderer0.org0.com-tlsrootcert"
  ordTlsSignCert: "orderer0.org0.com-tlssigncert"
  ordOrg0Tlscacert: "org0-tls-ca-cert"
