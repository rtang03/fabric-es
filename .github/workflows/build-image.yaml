name: Build Images
on:
  push:
    tags:
      - 'v*'
    paths-ignore:
      - '**.md'
env:
  GKE_PROJECT: fdi-test-net
  GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
  GITHUB_SHA: ${{ github.sha }}
  GKE_ZONE: us-central1-a
  GKE_CLUSTER: test-net-cluster-1
  AUTH_IMAGE: fabric-es/auth-server
  GW_ORG1_IMAGE: fabric-es/gw-org1
  REGISTRY_HOSTNAME: gcr.io
  DEPLOYMENT_NAME: gke-test

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Setup Node.js for use with action
        uses: actions/setup-node@v1.1.0
        with:
          node-version: '8.x'
          version: '8.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@fabric-es'
      - run: yarn install --frozen-lockfile --ignore-engines
      - run: yarn lint:lib
      - run: yarn lint:app
      - name: Run unit and integration tests
        run: yarn unit-int-test
      - name: Setup Google account
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_email: ${{ secrets.GKE_EMAIL }}
          service_account_key: ${{ secrets.GKE_KEY }}
      - name: Authenticate Google account
        run: gcloud auth configure-docker
      - name: Rename image tag for auth-server
        run: |
          TAG=$(echo $GITHUB_REF | sed 's/refs\/tags\/\(.*\)/\1/') && \
          docker tag fabric-es/auth-server:1.0 "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/auth-server:"$TAG"
#      - name: Prepare build context for auth-server
#        run: yarn build:auth
#      - name: Build auth-server image
#        run: |
#          TAG=$(echo $GITHUB_REF | sed 's/refs\/tags\/\(.*\)/\1/') && \
#          docker build --no-cache -f ./auth-server.dockerfile \
#            -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$AUTH_IMAGE":"$TAG" \
#            --build-arg GITHUB_SHA="$GITHUB_SHA" \
#            --build-arg GITHUB_REF="$GITHUB_REF" .
      - name: Publish auth-server image
        run: |
          TAG=$(echo $GITHUB_REF | sed 's/refs\/tags\/\(.*\)/\1/') && \
          docker push "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/auth-server:"$TAG"
#      - name: Prepare build context for gw-org1
#        run: yarn build:gw-dev-net:org1
#      - name: Build gw-org1 image
#        run: |
#          TAG=$(echo $GITHUB_REF | sed 's/refs\/tags\/\(.*\)/\1/') && \
#          docker build --no-cache -f ./gw-org1.dockerfile \
#            -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$GW_ORG1_IMAGE":"$TAG" \
#            --build-arg GITHUB_SHA="$GITHUB_SHA" \
#            --build-arg GITHUB_REF="$GITHUB_REF" .
      - name: Rename image tag for gw-org1
        run: |
          TAG=$(echo $GITHUB_REF | sed 's/refs\/tags\/\(.*\)/\1/') && \
          docker tag fabric-es/gw-org1:1.0  "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/gw-org1:"$TAG"
      - name: Publish gw-org1 image
        run: |
          TAG=$(echo $GITHUB_REF | sed 's/refs\/tags\/\(.*\)/\1/') && \
          docker push "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/gw-org1:"$TAG"
      - name: Create boilerplate.tar.gz
        run: yarn boilerplate
      - run: tar -czvf boilerplate.tar.gz ./.build
      - name: Create Release
        uses: docker://antonyurchenko/git-release:latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRAFT_RELEASE: "true"
          PRE_RELEASE: "true"
          CHANGELOG_FILE: "CHANGELOG.md"
          ALLOW_EMPTY_CHANGELOG: "false"
          ALLOW_TAG_PREFIX: "true"
        with:
          args: ./boilerplate.tar.gz
      - name: Publish Github Packages
        run: yarn publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "Build image done"
