on:
#  push:
#    branches: [ master ]
  pull_request:
    branches: [ master ]

name: CI

jobs:
  build:
    name: CI
    runs-on: ubuntu-latest
    # services:
    #   postgres:
    #     image: postgres:11.5
    #     ports: [ "5432:5432" ]
    #     options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Setup Node.js for use with action
        uses: actions/setup-node@v2
        with:
          node-version: '12.16.1'
          check-latest: true
      - name: yarn install
        run: |
          # see https://github.com/rtang03/fabric-es/issues/142
          curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          nvm --version
          nvm install v12.16.1
          nvm use v12.16.1
          yarn install
          nvm install v14.0.0
          nvm use v14.0.0
          npm rebuild grpc
          # npm rebuild grpc --target=14.0.0 --target_platform=linux --target_arch=x64 --target_libc=glibc
          nvm use v12.16.1
      - name: lint auth, chaincode, fabric-cqrs, operator, gateway-lib, proxy
        run: yarn lint:lib
      - name: lint gw-org*, model-*, ui-account
        run: yarn lint:app
      - name: Run tsc for all packages
        run: yarn tsc:all
      - name: deploy base 2-org fabric network with proxy, postgres, redis, auth
        run: cd /home/runner/work/fabric-es/fabric-es/deployments/dev-net && sudo ./dn-run.2-db-red-auth.sh
      - name: Run unit tests for chaincode, operator, fabric-cqrs, model-*, gateway-lib
        run: sudo yarn unit-test
      - name: clean-up artifacts
        run: sudo rm -rf deployments/dev-net/artifacts
      - name: clean-up volume
        run: sudo rm -rf deployments/dev-net/volume
      - name: typedoc
        run: sudo yarn typedoc
      - name: make dir
        run: mkdir -p /home/runner/work/fabric-es/fabric-es/build
      - name: Deploy doc
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          ACCESS_TOKEN: ${{ secrets.CI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: build # The folder the action should deploy.
          CLEAN: true # Auto
          REPOSITORY_NAME: rtang03/fabric-es.github.io
