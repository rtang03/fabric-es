pipeline {

    environment {
        baseName = 'gw-org3'

        registryCredential = 'docker-registry-login'
        registryUrl = 'https://build:5000'
        nodeImage = 'build:5000/node8-build'

        yarnInstall = 'yarn install --ignore-engines'
        yarnBuild = 'yarn build:${baseName}'

        imgName = 'build:5000/${baseName}:latest'
        dockerBuild = 'docker build -t ${imgName} -f ${baseName}.dockerfile .'

        dockerhubCredential = 'dockerhub-login'
        imgNameHub = 'hktfp5/${baseName}:latest'
    }

    agent none

    stages {
        stage('Yarn Build') {
            agent {
                docker {
                    image nodeImage
                    args '-p 3000:3000'
                    registryUrl registryUrl
                    registryCredentialsId registryCredential
                }
            }
            steps {
                sh yarnInstall
                sh yarnBuild
            }
        }
        stage('Docker Build') {
            agent { label 'master' }
            steps {
                sh dockerBuild
            }
        }
        stage('Docker Push') {
            agent { label 'master' }
            steps {
                withCredentials([usernamePassword(credentialsId: registryCredential, passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                    sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword} build:5000"
                    sh "docker push ${imgName}"
                }
            }
        }
        stage('Dockerhub Push') {
            agent { label 'master' }
            steps {
                sh 'docker tag ${imgName} ${imgNameHub}'
                withCredentials([usernamePassword(credentialsId: dockerhubCredential, passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) {
                    sh "docker login -u ${env.dockerHubUser} -p ${env.dockerHubPassword}"
                    sh "docker push ${imgNameHub}"
                }
            }
        }
    }
}