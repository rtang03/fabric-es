#!/bin/bash

##############
# Environments
##############

export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export NC='\033[0m'

##############
# Functions
##############

print() {
  MESSAGE=$1
  CODE=$2

  if [ $2 -ne 0 ] ; then
    printf "${RED}[`date +"%Y-%m-%d %H:%M:%S"`] ${MESSAGE} failed${NC}\n"
    exit -1
  fi
  printf "${GREEN}[`date +"%Y-%m-%d %H:%M:%S"`] Complete ${MESSAGE}${NC}\n\n"
  sleep 1
}

subject() {
    printf "${YELLOW}"
    echo ''
    echo '####'
    echo '#### ' $1
#    echo '#### '[`date +"%Y-%m-%d %H:%M:%S"`]
    echo '####'
    echo ''
    printf "${NC}"
}

#############################
#         Install           #
#############################
#
subject "Build Chaincode..."
#
cd ../../packages/chaincode
# yarn install
yarn build
print "build chaincode" $?

#############################
#
subject "Install Chaincode..."
#

# Install chaincode
{{#orgs.peer}}
{{#peers.endpoints}}
{{#chaincodes}}
docker exec \
  -e "CORE_PEER_ADDRESS={{-}}{{network.host-delimiter}}{{domain}}:{{port}}" \
  -e "CORE_PEER_LOCALMSPID={{id}}" \
  -e "CORE_PEER_TLS_ROOTCERT_FILE=${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem" \
  -e "CORE_PEER_MSPCONFIGPATH=${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp" \
  cli peer chaincode install -n {{ccname}} -v {{ccver}} -p {{{artifacts.peers-working-dir}}}/chaincode -l node \
    --tls --cafile ${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem

print "install {{ccname}} on {{name}} {{-}}" $?

{{/chaincodes}}
docker exec \
  -e "CORE_PEER_ADDRESS={{-}}{{network.host-delimiter}}{{domain}}:{{port}}" \
  -e "CORE_PEER_LOCALMSPID={{id}}" \
  -e "CORE_PEER_TLS_ROOTCERT_FILE=${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem" \
  -e "CORE_PEER_MSPCONFIGPATH=${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp" \
  cli peer chaincode list --installed

print "list chaincode on {{name}} {{-}}" $?

{{/peers.endpoints}}
{{/orgs.peer}}

#############################
#        Instantiate        #
#############################
#
subject "Instantiate Chaincode..."
#

{{#orgs.peer.0}}
{{#peers.endpoints.0}}
{{#chaincodes}}
docker exec \
  -e "CORE_PEER_ADDRESS={{-}}{{network.host-delimiter}}{{domain}}:{{port}}" \
  -e "CORE_PEER_LOCALMSPID={{id}}" \
  -e "CORE_PEER_TLS_ROOTCERT_FILE=${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem" \
  -e "CORE_PEER_MSPCONFIGPATH=${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp" \
  cli peer chaincode instantiate \
    -o {{orgs.orderer.orderers.endpoints.0.-}}{{network.host-delimiter}}{{orgs.orderer.domain}}:{{orgs.orderer.orderers.endpoints.0.ext-port}} \
    -C {{network.peer-channels.0}} -n {{ccname}} -v {{ccver}} -l node \
    -c '{{{instantiate}}}' -P "{{{policy}}}" \
    --tls --cafile ${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem {{#collection}}{{{collection}}}{{/collection}}

print "instantiate {{ccname}}" $?
sleep 2

{{/chaincodes}}
{{/peers.endpoints.0}}
{{/orgs.peer.0}}

#############################
#          Invoke           #
#############################
#
subject "Invoke Chaincode..."
#

{{#orgs.peer}}
{{#peers.endpoints}}
# Invoke event store
docker exec \
  -e "CORE_PEER_ADDRESS={{-}}{{network.host-delimiter}}{{domain}}:{{port}}" \
  -e "CORE_PEER_LOCALMSPID={{id}}" \
  -e "CORE_PEER_TLS_ROOTCERT_FILE=${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem" \
  -e "CORE_PEER_MSPCONFIGPATH=${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp" \
  cli peer chaincode invoke \
    -o {{orgs.orderer.orderers.endpoints.0.-}}{{network.host-delimiter}}{{orgs.orderer.domain}}:{{orgs.orderer.orderers.endpoints.0.ext-port}} \
    -C {{network.peer-channels.0}} -n eventstore --waitForEvent \
    -c '{"Args":["createCommit", "dev_entity", "ent_dev_{{script-naming}}", "0","[{\"type\":\"mon\"}]", "ent_dev_{{script-naming}}"]}' \
    --tls --cafile ${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem \

print "invoke event store on {{name}} {{-}}" $?

# Query event store
docker exec \
  -e "CORE_PEER_ADDRESS={{-}}{{network.host-delimiter}}{{domain}}:{{port}}" \
  -e "CORE_PEER_LOCALMSPID={{id}}" \
  -e "CORE_PEER_TLS_ROOTCERT_FILE=${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem" \
  -e "CORE_PEER_MSPCONFIGPATH=${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp" \
  cli peer chaincode invoke \
    -o {{orgs.orderer.orderers.endpoints.0.-}}{{network.host-delimiter}}{{orgs.orderer.domain}}:{{orgs.orderer.orderers.endpoints.0.ext-port}} \
    -C {{network.peer-channels.0}} -n eventstore --waitForEvent \
    -c '{"Args":["eventstore:queryByEntityName","dev_entity"]}' \
    --tls --cafile ${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem \

print "query event store on {{name}} {{-}}" $?

# Invoke private data
export COMMIT=$(echo -n "{\"eventString\":\"[]\"}" | base64 | tr -d \\n);

docker exec \
  -e "CORE_PEER_ADDRESS={{-}}{{network.host-delimiter}}{{domain}}:{{port}}" \
  -e "CORE_PEER_LOCALMSPID={{id}}" \
  -e "CORE_PEER_TLS_ROOTCERT_FILE=${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem" \
  -e "CORE_PEER_MSPCONFIGPATH=${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp" \
  cli peer chaincode invoke \
    -o {{orgs.orderer.orderers.endpoints.0.-}}{{network.host-delimiter}}{{orgs.orderer.domain}}:{{orgs.orderer.orderers.endpoints.0.ext-port}} \
    -C {{network.peer-channels.0}} -n privatedata --waitForEvent \
    -c '{"Args":["privatedata:createCommit","{{name}}PrivateDetails","private_entityName","private_{{script-naming}}","0","private_{{script-naming}}"]}' \
    --transient "{\"eventstr\":\"$COMMIT\"}" \
    --tls --cafile ${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem

 print "invoke private data on {{name}} {{-}}" $?

# Query private data
docker exec \
  -e "CORE_PEER_ADDRESS={{-}}{{network.host-delimiter}}{{domain}}:{{port}}" \
  -e "CORE_PEER_LOCALMSPID={{id}}" \
  -e "CORE_PEER_TLS_ROOTCERT_FILE=${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem" \
  -e "CORE_PEER_MSPCONFIGPATH=${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp" \
  cli peer chaincode invoke \
    -o {{orgs.orderer.orderers.endpoints.0.-}}{{network.host-delimiter}}{{orgs.orderer.domain}}:{{orgs.orderer.orderers.endpoints.0.ext-port}} \
    -C {{network.peer-channels.0}} -n privatedata --waitForEvent \
    -c '{"Args":["privatedata:queryByEntityName","{{name}}PrivateDetails","private_entityName"]}' \
    --tls --cafile ${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem \

print "query private data on {{name}} {{-}}" $?
sleep 3

{{/peers.endpoints}}
{{/orgs.peer}}

#############################

subject "Install CC Completed!"