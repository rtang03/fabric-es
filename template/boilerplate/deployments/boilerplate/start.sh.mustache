##############
# Environments
##############

export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export NC='\033[0m'

export COMPOSE_PROJECT_NAME={{network.compose-project-name}}
export IMAGE_TAG=1.4.3
export DOCKER_CRYPTO={{{artifacts.docker}}}/{{{artifacts.crypto}}}{{#artifacts.crypto}}/{{/artifacts.crypto}}

##############
# Functions
##############

print() {
  MESSAGE=$1
  CODE=$2

  if [ $2 -ne 0 ] ; then
    printf "${RED}[`date +"%Y-%m-%d %H:%M:%S"`] ${MESSAGE} failed${NC}\n"
    exit -1
  fi
  printf "${GREEN}[`date +"%Y-%m-%d %H:%M:%S"`] Complete ${MESSAGE}${NC}\n\n"
  sleep 1
}

subject() {
    printf "${YELLOW}"
    echo ''
    echo '####'
    echo '#### ' $1
    echo '####'
    echo ''
    printf "${NC}"
}

#############################
#     Start Bootstrap       #
#############################
#
subject "Start CA Servers..."
#

docker-compose -f config/caservers.yaml up -d
print "docker-compose -f config/caservers.yaml up -d" $?

#############################
#
subject "Generate Certs..."
#

docker exec {{orgs.tls.ca.host}}{{network.host-delimiter}}{{orgs.tls.domain}} sh -c "/setup/enroll_tls.sh"
print "enroll TLS Certs" $?
docker exec {{orgs.orderer.ca.host}}{{network.host-delimiter}}{{orgs.orderer.domain}} sh -c "/setup/enroll_org0.sh"
print "enroll for {{orgs.orderer.name}}" $?
{{#orgs.peer}}
docker exec {{ca.host}}{{network.host-delimiter}}{{domain}} sh -c "/setup/enroll_{{script-naming}}.sh"
print "enroll for {{name}}" $?
{{/orgs.peer}}

#############################
#
subject "Start Peer Nodes..."
#

docker-compose -f config/peernodes.yaml up -d
print "docker-compose -f config/peernodes.yaml up -d" $?

#############################
#
subject "Create Genesis Block..."
#

# {{orgs.orderer.name}}
docker exec cli sh -c "mkdir -p ${DOCKER_CRYPTO}{{{orgs.orderer.msp-path}}}/admincerts"
docker exec cli sh -c "mkdir -p ${DOCKER_CRYPTO}{{{orgs.orderer.msp-path}}}/cacerts"
docker exec cli sh -c "mkdir -p ${DOCKER_CRYPTO}{{{orgs.orderer.msp-path}}}/tlscacerts"
docker exec cli sh -c "mkdir -p ${DOCKER_CRYPTO}{{{orgs.orderer.msp-path}}}/users"

docker exec cli sh -c "cp ${DOCKER_CRYPTO}{{{orgs.orderer.orderers.endpoints.0.cert-path}}}/msp/admincerts/{{orgs.orderer.domain}}-admin-cert.pem ${DOCKER_CRYPTO}{{{orgs.orderer.msp-path}}}/admincerts"
docker exec cli sh -c "cp ${DOCKER_CRYPTO}{{{orgs.orderer.orderers.endpoints.0.cert-path}}}/assets/ca/{{orgs.orderer.domain}}-ca-cert.pem ${DOCKER_CRYPTO}{{{orgs.orderer.msp-path}}}/cacerts"
docker exec cli sh -c "cp ${DOCKER_CRYPTO}{{{orgs.orderer.orderers.endpoints.0.cert-path}}}/assets/tls-ca/tls-ca-cert.pem ${DOCKER_CRYPTO}{{{orgs.orderer.msp-path}}}/tlscacerts"

print "preparing certs for {{orgs.orderer.name}}" $?
{{#orgs.peer}}

# {{name}}
docker exec cli sh -c "mkdir -p ${DOCKER_CRYPTO}{{{msp-path}}}/admincerts"
docker exec cli sh -c "mkdir -p ${DOCKER_CRYPTO}{{{msp-path}}}/cacerts"
docker exec cli sh -c "mkdir -p ${DOCKER_CRYPTO}{{{msp-path}}}/tlscacerts"
docker exec cli sh -c "mkdir -p ${DOCKER_CRYPTO}{{{msp-path}}}/users"

docker exec cli sh -c "cp ${DOCKER_CRYPTO}{{{peers.endpoints.0.cert-path}}}/msp/admincerts/{{domain}}-admin-cert.pem ${DOCKER_CRYPTO}{{{msp-path}}}/admincerts"
docker exec cli sh -c "cp ${DOCKER_CRYPTO}{{{peers.endpoints.0.cert-path}}}/assets/ca/{{domain}}-ca-cert.pem ${DOCKER_CRYPTO}{{{msp-path}}}/cacerts"
docker exec cli sh -c "cp ${DOCKER_CRYPTO}{{{peers.endpoints.0.cert-path}}}/assets/tls-ca/tls-ca-cert.pem ${DOCKER_CRYPTO}{{{msp-path}}}/tlscacerts"

print "preparing certs for {{name}}" $?
{{/orgs.peer}}

docker exec -w "/config" -e "FABRIC_CFG_PATH=/config" cli sh -c \
  "configtxgen -profile OrgsOrdererGenesis -outputBlock genesis.block -channelID {{network.orderer-channel}}"
print "preparing genesis.block" $?

docker exec -w "/config" -e "FABRIC_CFG_PATH=/config" cli sh -c \
  "configtxgen -profile OrgsChannel -outputCreateChannelTx channel.tx -channelID {{network.peer-channels.0}}"
print "preparing channel.tx" $?

{{#orgs.orderer.orderers.endpoints}}
docker exec -w "/config" cli sh -c "cp genesis.block ${DOCKER_CRYPTO}{{{cert-path}}}"
{{/orgs.orderer.orderers.endpoints}}
docker exec -w "/config" cli sh -c "rm genesis.block"

docker exec -w "/config" cli sh -c "cp channel.tx ${DOCKER_CRYPTO}{{{orgs.peer.0.peers.endpoints.0.cert-path}}}/assets"
docker exec -w "/config" cli sh -c "rm channel.tx"

print "creating genesis block" $?

#############################
#
subject "Start Ordering Service Nodes..."
#

docker-compose -f config/orderers.yaml -f config/cadvisor.yaml up -d
print "docker-compose -f config/orderers.yaml up -d" $?

#############################
#
subject "Join channels..."
#

# Prepare admin certs
{{#orgs.peer}}
docker exec cli sh -c "mkdir -p ${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp/admincerts"
docker exec cli sh -c "cp ${DOCKER_CRYPTO}{{{peers.endpoints.0.cert-path}}}/msp/admincerts/{{domain}}-admin-cert.pem ${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp/admincerts"
{{/orgs.peer}}

# Create channel
docker exec \
  -w "{{{artifacts.docker}}}" \
  -e "CORE_PEER_ADDRESS={{orgs.peer.0.peers.endpoints.0.-}}{{network.host-delimiter}}{{orgs.peer.0.domain}}:{{orgs.peer.0.peers.endpoints.0.port}}" \
  -e "CORE_PEER_LOCALMSPID={{orgs.peer.0.id}}" \
  -e "CORE_PEER_TLS_ROOTCERT_FILE=${DOCKER_CRYPTO}{{{orgs.peer.0.peers.endpoints.0.cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem" \
  -e "CORE_PEER_MSPCONFIGPATH=${DOCKER_CRYPTO}{{{orgs.peer.0.admin-cert-path}}}/msp" \
  cli peer channel create -c {{network.peer-channels.0}} -f ${DOCKER_CRYPTO}{{{orgs.peer.0.peers.endpoints.0.cert-path}}}/assets/channel.tx -o {{orgs.orderer.orderers.endpoints.0.-}}{{network.host-delimiter}}{{orgs.orderer.domain}}:{{orgs.orderer.orderers.endpoints.0.ext-port}} \
    --outputBlock {{network.peer-channels.0}}.block \
    --tls --cafile ${DOCKER_CRYPTO}{{{orgs.peer.0.peers.endpoints.0.cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem

print "peer channel create" $?

{{#orgs.peer}}
{{#peers.endpoints}}
# {{name}} {{-}} join channel
docker exec -w "{{{artifacts.docker}}}" cli sh -c "cp {{network.peer-channels.0}}.block ${DOCKER_CRYPTO}{{{cert-path}}}/assets"

docker exec \
  -e "CORE_PEER_ADDRESS={{-}}{{network.host-delimiter}}{{domain}}:{{port}}" \
  -e "CORE_PEER_LOCALMSPID={{id}}" \
  -e "CORE_PEER_TLS_ROOTCERT_FILE=${DOCKER_CRYPTO}{{{cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem" \
  -e "CORE_PEER_MSPCONFIGPATH=${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp" \
  cli peer channel join -b ${DOCKER_CRYPTO}{{{cert-path}}}/assets/{{network.peer-channels.0}}.block

print "join channel for {{name}} {{-}}" $?

docker exec cli peer channel list
docker exec cli peer channel getinfo -c {{network.peer-channels.0}}

{{/peers.endpoints}}
{{/orgs.peer}}
#############################
#
subject "Update Anchor Peer..."
#

{{#orgs.peer}}
docker exec -w "/config" -e "FABRIC_CFG_PATH=/config" cli sh -c \
  "configtxgen -profile OrgsChannel -outputAnchorPeersUpdate ${DOCKER_CRYPTO}{{{peers.endpoints.0.cert-path}}}/assets/{{name}}Anchors.tx -channelID {{network.peer-channels.0}} -asOrg {{name}}"
print "preparing {{name}}Anchors.tx" $?

docker exec \
  -e "CORE_PEER_ADDRESS={{peers.endpoints.0.-}}{{network.host-delimiter}}{{domain}}:{{peers.endpoints.0.port}}" \
  -e "CORE_PEER_LOCALMSPID={{id}}" \
  -e "CORE_PEER_MSPCONFIGPATH=${DOCKER_CRYPTO}{{{admin-cert-path}}}/msp" \
  cli peer channel update -c {{network.peer-channels.0}} -f ${DOCKER_CRYPTO}{{{peers.endpoints.0.cert-path}}}/assets/{{name}}Anchors.tx \
    -o {{orgs.orderer.orderers.endpoints.0.-}}{{network.host-delimiter}}{{orgs.orderer.domain}}:{{orgs.orderer.orderers.endpoints.0.ext-port}} \
    --tls --cafile ${DOCKER_CRYPTO}{{{peers.endpoints.0.cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem
print "update anchor peer for {{name}}" $?

{{/orgs.peer}}
#############################

subject "Fabric network started!"