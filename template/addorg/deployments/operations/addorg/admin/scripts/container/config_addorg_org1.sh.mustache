export CORE_PEER_MSPCONFIGPATH={{{artifacts.docker}}}/{{{artifacts.crypto}}}{{#artifacts.crypto}}/{{/artifacts.crypto}}{{{orgs.peer.0.admin-cert-path}}}/msp
export CORE_PEER_ADDRESS={{orgs.peer.0.peers.endpoints.0.-}}{{network.host-delimiter}}{{orgs.peer.0.domain}}:{{orgs.peer.0.peers.endpoints.0.port}}
export ORDERER_URL={{orgs.orderer.orderers.endpoints.0.-}}{{network.host-delimiter}}{{orgs.orderer.domain}}:{{orgs.orderer.orderers.endpoints.0.ext-port}}
export CA_FILE={{{artifacts.docker}}}/{{{artifacts.crypto}}}{{#artifacts.crypto}}/{{/artifacts.crypto}}{{{orgs.peer.0.peers.endpoints.0.cert-path}}}/tls-msp/tlscacerts/tls-0-0-0-0-{{orgs.tls.ca.port}}.pem
export FABRIC_CFG_PATH=/etc/hyperledger/fabric

cd {{{artifacts.docker}}}/addorg;

# Fetch config block
peer channel fetch config config_block.pb -o ${ORDERER_URL} -c {{network.peer-channels.0}} --tls --cafile ${CA_FILE}

# Decode channel configuration block
configtxlator proto_decode --input config_block.pb --type common.Block | jq .data.data[0].payload.data.config > config.json

# Append {{orgs.addorg.name}} to configuration JSON
jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups": {"{{orgs.addorg.name}}":.[1]}}}}}' config.json {{orgs.addorg.name}}.json > modified_config.json

# Translate config.json back into protobuf
configtxlator proto_encode --input config.json --type common.Config --output config.pb

# Encode modified_config.json
configtxlator proto_encode --input modified_config.json --type common.Config --output modified_config.pb

# Calculate delta between the old and new config
configtxlator compute_update --channel_id {{network.peer-channels.0}} --original config.pb --updated modified_config.pb --output {{orgs.addorg.name}}_update.pb

# Decode the Update protobuf
configtxlator proto_decode --input {{orgs.addorg.name}}_update.pb --type common.ConfigUpdate | jq . > {{orgs.addorg.name}}_update.json

# Wrap in an envelope message
echo '{"payload":{"header":{"channel_header":{"channel_id":"{{network.peer-channels.0}}", "type":2}},"data":{"config_update":'$(cat {{orgs.addorg.name}}_update.json)'}}}' | jq . > {{orgs.addorg.name}}_update_in_envelope.json

# convert into protobuf
configtxlator proto_encode --input {{orgs.addorg.name}}_update_in_envelope.json --type common.Envelope --output {{orgs.addorg.name}}_update_in_envelope.pb

# Sign config as org 1
peer channel signconfigtx -f {{orgs.addorg.name}}_update_in_envelope.pb
